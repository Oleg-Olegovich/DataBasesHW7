namespace DataBasesHW7.Management;

/// <summary>
/// Class that is capable of drawing the game in Console.
/// Contains all the methods for outputting data.
/// </summary>
static class Drawer
{
    /// <summary>
    /// Constant width of the interface border.
    /// </summary>
    private const int Width = 10;

    /// <summary>
    /// Constant height of the interface border.
    /// </summary>
    public const int Height = 7; 

    /// <summary>
    /// This method generates a dictionary. The key is the 
    /// line number, and the value is a line from the data.
    /// </summary>
    private static Dictionary<int, string> GenerateDictionaryOfDataLines(int startPoint, string[] dataLines)
    {
        var data = new Dictionary<int, string>();
        for (int i = startPoint, j = 0; j < dataLines.Length; ++i, ++j)
        {
            data.Add(i, dataLines[j]);
        }
        return data;
    }

    /// <summary>
    /// This method generates an upper and lower border line.
    /// </summary>
    private static string GenerateBorder(int width)
    {
        var line = "";
        line += "@";
        for (int i = 0; i < width; ++i)
        {
            line += "~";
        }
        line += "@";
        return line;
    }

    /// <summary>
    /// Method prints an empty line (without borders).
    /// </summary>
    private static void DrawEmptyLine(int width)
    {
        for (int i = 0; i < width; ++i)
        {
            Console.Write(" ");
        }
    }

    /// <summary>
    ///  Method prints an empty line with borders.
    /// </summary>
    private static void DrawEmptyRow(int width)
    {
        Console.Write("|");
        DrawEmptyLine(width);
        Console.WriteLine("|");
    }

    /// <summary>
    /// Method prints a line generated by generateLine() method
    /// </summary>
    private static void DrawBorder(int width)
    {
        Console.WriteLine(GenerateBorder(width));
    }

    /// <summary>
    /// Method prints data in the middle of the scree and draw borders.
    /// </summary>
    private static void DrawData(int width, string data, bool centralize)
    {
        // Calculating the distance from the left side of the screen to the data.
        var leftDistance = centralize ? width / 2 - data.Length / 2 : 1;
        // Calculating the distance from the data to the right side of the screen.
        var rightDistance = width - leftDistance - data.Length;
        Console.Write("|");
        DrawEmptyLine(leftDistance);
        Console.Write(data);
        DrawEmptyLine(rightDistance);
        Console.WriteLine("|");
    }

    /// <summary>
    /// This metod returns the length of the longest line in the data (+2).
    /// </summary>
    private static int FindLongestLine(IReadOnlyDictionary<int, string>? data, int height)
    {
        var result = 2;
        if (data == null)
        {
            return result;
        }
        
        for (var i = 0; i < height; ++i)
        {
            if (data.ContainsKey(i))
            {
                result = Math.Max(result, data[i].Length + 2);
            }
        }
        return result;
    }

    /// <summary>
    /// This is the universal method that draws data in the interface.
    /// </summary>
    /// <param name="margin">The number of empty lines at the top between the border and the text.</param>
    /// <param name="text">The text interface.</param>
    /// <param name="centralize">If True, the text will be centralized.</param>
    public static void DrawInterface(int margin, string[] text, bool centralize)
    {
        Console.Clear();
        var data = GenerateDictionaryOfDataLines(margin, text);
        /* If the data does not fit in the standard 
         * interface field, it will be expanded. */
        var height = Math.Max(Height, data.Count + 1);
        var width = Math.Max(Width, FindLongestLine(data, height));
        DrawBorder(width);
        for (var i = 0; i < height; ++i)
        {
            if (data.ContainsKey(i))
            {
                DrawData(width, data[i], centralize);
            }
            else
            {
                DrawEmptyRow(width);
            }
        }
        DrawBorder(width);
    }

    /// <summary>
    /// Overloading the method for the case of a single string.
    /// </summary>
    /// <param name="margin">The number of empty lines at the top between the border and the text.</param>
    /// <param name="line">The text interface.</param>
    /// <param name="centralize">If True, the text will be centralized.</param>
    public static void DrawInterface(int margin, string line, bool centralize)
    {
        DrawInterface(margin, line.Split(Environment.NewLine), centralize);
    }
}